package com.it.bruce.leetcode.华为.模拟十二;

import java.util.Arrays;

/**
 * 假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。对每个孩子 i ，都有一个胃口值 gi ，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j ，都有一个尺寸 sj 。如果 sj >= gi ，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。
 * <p>
 * 注意：
 * <p>
 * 你可以假设胃口值为正。
 * 一个小朋友最多只能拥有一块饼干。
 * <p>
 * 示例 1:
 * <p>
 * 输入: [1,2,3], [1,1]
 * <p>
 * 输出: 1
 * <p>
 * 解释:
 * 你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。
 * 虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。
 * 所以你应该输出1。
 * 示例 2:
 * <p>
 * 输入: [1,2], [1,2,3]
 * <p>
 * 输出: 2
 * <p>
 * 解释:
 * 你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。
 * 你拥有的饼干数量和尺寸都足以让所有孩子满足。
 * 所以你应该输出2.
 */
public class Problem1 {
    public static void main(String[] args) {
//        int[] g = {1226, 312, 534, 981, 249, 968, 420, 1359, 955, 641, 1285, 992, 564, 434, 128, 354, 583, 395, 1360, 1211, 1242, 801, 90, 473, 688, 850, 136, 963, 518, 261, 1235, 875, 1424, 71, 928, 1172, 487, 1024, 1413, 415, 702, 880, 678, 950, 902, 308, 1527, 181, 897, 37, 739, 425, 1334, 914, 1549, 822, 806, 771, 55, 818, 426, 1065, 871, 1212, 110, 269, 721, 502, 826, 909, 90, 1319, 69, 1458, 1010, 649, 1076, 1216, 399, 513, 384, 973, 1237, 941, 348, 782, 888, 564, 349, 371, 49, 1086, 501, 590, 273, 1277, 171, 675, 384, 737, 607, 1324, 70, 1471, 1503, 604, 85, 1424, 1139, 1438, 939, 1224, 400, 322, 222, 1522, 295, 339, 1135, 1265, 869, 938, 456, 1282, 56, 629, 1488, 1018, 1320, 1491, 1025, 668, 873, 1162, 61, 149, 511, 468, 330, 1197, 372, 176, 1115, 519, 1477, 801, 360, 1305, 66, 921, 186, 1002, 1526, 834, 669, 1022, 201, 209, 1107, 954, 1160, 503, 128, 209, 845, 598, 481, 960, 470, 1391, 1398, 647, 1132, 612, 1173, 758, 325, 45, 505, 46, 969, 918, 592, 1105, 685, 465, 1185, 1369, 1297, 1000, 32, 339, 663, 1538, 624, 534, 1281, 1540, 561, 875, 318, 989, 150, 1416, 1212, 1163, 539, 984, 1437, 1403, 491, 890, 1393, 221, 1376, 1496, 852, 730, 1019, 511, 1051, 64, 351, 751, 1457, 1481, 1360, 214, 1211, 215, 1376, 957, 1092, 91, 1470, 861, 1063, 46, 1288, 230, 548, 1176, 636, 1495, 593, 342, 269, 1480, 101, 918, 870, 857, 1415, 430, 1313, 1296, 124, 1404, 957, 1265, 1414, 1278, 504, 763, 1171, 950, 278, 1495, 850, 786, 554, 951, 1432, 535, 245, 1550, 861, 1214, 343, 440, 1258, 690, 831, 401, 534, 348, 1508, 1359, 1408, 1066, 792, 178, 1002, 398, 1056, 771, 55, 1274, 1497, 1066, 304, 259, 644, 1404, 311, 1018, 1433, 1492, 1154, 1439, 646, 406, 1541, 1253, 466, 334, 546, 1325, 280, 134, 766, 1529, 584, 181, 1401, 1096, 1544, 867, 381, 75, 226, 696, 1145, 1093, 841, 188, 1343, 223, 574, 655, 1399, 1269, 1196, 1318, 308, 1410, 1155, 969, 443, 444, 469, 1497, 1227, 487, 620, 322, 124, 930, 1276, 806, 389, 766, 545, 304, 1472, 160, 1137, 244, 768, 1112, 1347, 317, 929, 1168, 427, 641, 1218, 992, 1252, 1530, 968, 1215, 893, 654, 688, 1249, 977, 85, 1505, 615, 419, 981, 117, 741, 1175, 741, 968, 884, 794, 894, 908, 808, 1542, 1393, 456, 563, 1367, 622, 556, 1114, 183, 1529, 489, 361, 615, 1157, 1088, 193, 237, 580, 417, 677, 1377, 801, 863, 77, 390, 475, 1254, 452, 1175, 448, 788, 344, 944, 180, 110, 1463, 327, 162, 525, 1306, 342, 1429, 72, 78, 302, 237, 1175, 716, 643, 1535, 1423, 391, 36, 790, 1032, 1316, 1121, 665, 1336, 472, 625, 1210, 745, 955, 160, 891, 994, 1086, 39, 1130, 656, 566, 1013, 180, 1138, 1096, 979, 898, 1347, 694, 782, 377, 187, 1328, 1115, 526, 1527, 328, 33, 588, 237, 333, 1213, 281, 766, 1450, 1019, 687, 133, 1229, 414, 1433, 657, 558, 1549, 606, 1006, 1541, 938, 787, 400, 1255, 358, 744, 1309, 1104, 1069, 792, 560, 1311, 290, 1350, 426, 472, 139, 644, 1295, 1547, 727, 526, 854, 976, 56, 1139, 509, 610, 1470, 785, 775, 446, 40, 581, 256, 1194, 517, 184, 995, 183, 791, 473, 232, 176, 453, 944, 1107, 984, 1506, 348, 1313, 568, 348, 1279, 1309, 956, 1102, 986, 1494, 144, 821, 551, 130, 1027, 64, 1283, 1246, 1416, 1548, 118, 1361, 1003, 265, 1119, 1175, 1417, 1003, 145, 345, 1130, 593, 633, 1483, 500, 865, 714, 1399, 1373, 69, 383, 390, 438, 1413, 955, 200, 362, 28, 1120, 1142, 560, 978, 407, 1335, 1098, 1353, 1477, 1203, 902, 270, 289, 1197, 258, 589, 1183, 91, 299, 154, 846, 337, 1457, 1250, 1177, 823, 311, 1218, 341, 688, 1216, 1410, 837, 59, 583, 980, 1160, 522, 856, 1234, 209, 49, 142, 731, 57, 1493, 327, 1377, 643, 759, 281, 274, 822, 877, 166, 1333, 984, 1059, 1316, 1163, 876, 665, 772, 974, 30, 901, 1074, 272, 1469, 669, 613, 1081, 309, 1327, 1258, 1315, 190, 702, 500, 217};
//        int[] s = {29, 310, 236, 441, 200, 267, 115, 59, 277, 42, 361, 112, 483, 104, 338, 69, 438, 55, 318, 470, 20, 490, 455, 119, 259, 51, 492, 50, 160, 414, 38, 289, 429, 446, 350, 412, 12, 515, 367, 397, 122, 35, 522, 355, 448, 266, 333, 500, 211, 226, 203, 366, 240, 324, 111, 280, 520, 321, 211, 360, 437, 292, 512, 161, 85, 139, 12, 211, 236, 213, 377, 85, 494};
        int[] g = {10, 9, 8, 7};
        int[] s = {10, 9, 8, 7};
        Problem1 main = new Problem1();
        System.out.println(main.findContentChildren(g, s));
    }

    public int findContentChildren(int[] g, int[] s) {
        Arrays.sort(g);
        Arrays.sort(s);
        int i = 0;
        int j = 0;
        while (i < g.length && j < s.length) {
            if (g[i] <= s[j]) {
                i++;
                j++;
            } else {
                j++;
            }
        }
        return i;
    }
}
